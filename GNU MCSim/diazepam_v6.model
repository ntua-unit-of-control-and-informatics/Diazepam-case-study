# diazepam model, Gueorguieva et al 2006
# v3: fudge factor for Kp_ad removed, Kp_re_base variable.
# v4: fraction flows and Kp baseline values are parameterized
#     (this does not change computations).
#
# time in hours
# quantities in micrograms
# volumes in liters
#
# LI  liver,                        
# KI  kidney,                       
# BR  brain,                        
# SPL intestine,                    
# ST  stomach,                      
# MU  muscle from the hind limb,    
# AD  adipose,                      
# SK  skin after removal of hair,   
# TE  testes,                       
# HT  heart,                        
# LU  lungs,                        
# ART arterial blood pool,          
# VEN mixed venous blood pool.      

States = {C_mu, C_ad, C_te, C_sk, C_ht, C_br, C_ki, C_re, C_st, C_spl,
          C_li, C_lu, C_art, C_ven}; # microg/L

Inputs = {Rate_in}; # microg/h

Outputs = {C_plasma}; # microg/L

# Parameters:

# body mass (kg)
BM = 70;

# volumes (L, density 1 assumed):
V_mu  = 30;
V_ad  = 12.5;
V_te  = 0.035;
V_sk  = 2.6;
V_ht  = 0.33;
V_br  = 1.4;
V_ki  = 0.31;
V_re  = 16.8;
V_st  = 0.15;
V_spl = 1.01;
V_li  = 1.8;
V_lu  = 0.47;
V_art = 1.7;
V_ven = 3.9;

# fraction flows to tissues
Ff_mu = 0.17;
Ff_ad = 0.05;
Ff_te = 0.0005;  # males, females is 0.0002
Ff_sk = 0.05;
Ff_ht = 0.04;
Ff_br = 0.12;
Ff_ki = 0.19;
Ff_st = 0.01;
Ff_spl= 0.14;
Ff_ha = 0.065;
Ff_re = 0.1645;  # males, female is 0.1648

# baseline Kps (will be multiplied by "fudge" in Initialize{} to get final Kps)
Kp_mu_base  = 0.56;
Kp_te_base  = 0.76;
Kp_sk_base  = 0.46;
Kp_ht_base  = 0.86;
Kp_br_base  = 0.32;
Kp_ki_base  = 0.73;
Kp_re_base  = 0.50; # 0.5 or 2.2
Kp_st_base  = 0.75;
Kp_spl_base = 0.53;
Kp_li_base  = 1.35;
Kp_lu_base  = 0.71;

log_Cl_int; # log(70.8) # L/h
log_fudge;  # log(1)
log_Kp_ad;  # log(3.34)

Ratio_BP = 0.65; # blood to plasma ratio
fu       = 0.015;    

# statistical parameters:
sigma;
Sigma_var;
Sigma_vve;
Sigma_vad;
Sigma_qad;
Sigma_cli;


# Scaled parameters (will be computed in Initialize{})

# flows (L/h):
Q_mu ; # 61.2; 
Q_ad ; # 18.0;
Q_te ; # 3.6;
Q_sk ; # 18.0;
Q_ht ; # 14.4; 
Q_br ; # 43.2; 
Q_ki ; # 68.4;
Q_re ; # 55.8; 
Q_st ; # 3.6; 
Q_spl; # 50.4;
Q_ha ; # 23.4;
Q_ven; # 360;
Q_h  ;

# Fu_blood
fub;

# tissue to blood partition coefficients:
Kp_mu ; # 0.56;
Kp_te ; # 0.76;
Kp_sk ; # 0.46;
Kp_ht ; # 0.86;
Kp_br ; # 0.32;
Kp_ki ; # 0.73;
Kp_re ; # ?;
Kp_st ; # 0.75;
Kp_spl; # 0.53;
Kp_li ; # 1.35;
Kp_lu ; # 0.71;

Kp_ad;
Cl_int;
fudge;


Initialize {

  Q_ven = 11.22 * pow(BM, 0.81); # Calder 1984, White 1968, in Nestorov 2001

  Q_mu = Ff_mu  * Q_ven;
  Q_ad = Ff_ad  * Q_ven;
  Q_te = Ff_te  * Q_ven;   
  Q_sk = Ff_sk  * Q_ven;   
  Q_ht = Ff_ht  * Q_ven;   
  Q_br = Ff_br  * Q_ven;   
  Q_ki = Ff_ki  * Q_ven;   
  Q_st = Ff_st  * Q_ven;   
  Q_spl= Ff_spl * Q_ven;   
  Q_ha = Ff_ha  * Q_ven;
  Q_re = Ff_re  * Q_ven;

  Q_h = Q_ha + Q_st + Q_spl;

  fub = fu / Ratio_BP; # Fu_blood = Fu_plasma / Ratio_BP

  Kp_ad  = exp(log_Kp_ad);
  Cl_int = exp(log_Cl_int);
  fudge  = exp(log_fudge);

  Kp_mu  = Kp_mu_base  * fudge;
  Kp_te  = Kp_te_base  * fudge;
  Kp_sk  = Kp_sk_base  * fudge;
  Kp_ht  = Kp_ht_base  * fudge;
  Kp_br  = Kp_br_base  * fudge;
  Kp_ki  = Kp_ki_base  * fudge;
  Kp_re  = Kp_re_base  * fudge;
  Kp_st  = Kp_st_base  * fudge;
  Kp_spl = Kp_spl_base * fudge;
  Kp_li  = Kp_li_base  * fudge;
  Kp_lu  = Kp_lu_base  * fudge;

}

Dynamics {

  dt(C_mu)  = Q_mu  * (C_art - C_mu  / Kp_mu)  / V_mu;
  dt(C_ad)  = Q_ad  * (C_art - C_ad  / Kp_ad)  / V_ad;
  dt(C_te)  = Q_te  * (C_art - C_te  / Kp_te)  / V_te;
  dt(C_sk)  = Q_sk  * (C_art - C_sk  / Kp_sk)  / V_sk;
  dt(C_ht)  = Q_ht  * (C_art - C_ht  / Kp_ht)  / V_ht;
  dt(C_br)  = Q_br  * (C_art - C_br  / Kp_br)  / V_br;
  dt(C_ki)  = Q_ki  * (C_art - C_ki  / Kp_ki)  / V_ki;
  dt(C_re)  = Q_re  * (C_art - C_re  / Kp_re)  / V_re;
  dt(C_st)  = Q_st  * (C_art - C_st  / Kp_st)  / V_st;
  dt(C_spl) = Q_spl * (C_art - C_spl / Kp_spl) / V_spl;

  dt(C_li)  = (Q_ha * C_art + Q_st * C_st / Kp_st + Q_spl * C_spl / Kp_spl -
              (Q_h + Cl_int * fub) * C_li / Kp_li) / V_li;

  dt(C_lu)  = Q_ven * (C_ven - C_lu / Kp_lu) / V_lu;

  dt(C_art) = Q_ven * (C_lu / Kp_lu - C_art) / V_art;

  dt(C_ven) = (Q_mu * C_mu / Kp_mu + Q_ad * C_ad / Kp_ad +
               Q_te * C_te / Kp_te + Q_sk * C_sk / Kp_sk +
               Q_ht * C_ht / Kp_ht + Q_br * C_br / Kp_br +
               Q_ki * C_ki / Kp_ki + Q_re * C_re / Kp_re +
               Q_h  * C_li / Kp_li - Q_ven * C_ven + Rate_in) / V_ven;

}

CalcOutputs {
  C_plasma = C_ven / Ratio_BP;
  C_plasma = (C_plasma > 0 ? C_plasma : 1E-30);
}

End.
